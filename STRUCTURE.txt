shopware-analytics-case-thani/
├── README.md                          # Main documentation
├── QUICKSTART.md                      # Quick start guide
├── PROJECT_SUMMARY.md                 # Project overview
├── Makefile                           # Build & run commands
├── docker-compose.yml                 # Multi-service orchestration
├── api-examples.http                  # API request examples
├── test-setup.sh                      # Setup verification script
├── .gitignore                         # Git ignore rules
│
├── go-ingestion/                      # Go Ingestion Service (Port 8080)
│   ├── main.go                        # HTTP server + Redis publisher
│   ├── main_test.go                   # Unit tests
│   ├── go.mod                         # Go dependencies
│   ├── go.sum                         # Dependency checksums
│   └── Dockerfile                     # Container image
│
├── go-consumer/                       # Go Consumer Service
│   ├── main.go                        # Redis subscriber + SQLite writer
│   ├── go.mod                         # Go dependencies
│   ├── go.sum                         # Dependency checksums
│   └── Dockerfile                     # Container image
│
├── php-analytics/                     # PHP Analytics Service (Port 8000)
│   ├── public/
│   │   └── index.php                  # Entry point
│   ├── src/
│   │   ├── Kernel.php                 # Symfony kernel
│   │   ├── Controller/
│   │   │   └── AnalyticsController.php  # REST API endpoints
│   │   └── Service/
│   │       ├── DatabaseConnection.php   # PDO wrapper
│   │       └── AnalyticsService.php     # Business logic
│   ├── tests/
│   │   └── Service/
│   │       └── AnalyticsServiceTest.php # PHPUnit tests
│   ├── config/
│   │   ├── services.yaml              # Service definitions
│   │   ├── routes.yaml                # Route configuration
│   │   └── packages/
│   │       └── framework.yaml         # Framework config
│   ├── composer.json                  # PHP dependencies
│   ├── phpunit.xml                    # Test configuration
│   ├── .env                           # Environment variables
│   └── Dockerfile                     # Container image
│
├── frontend/                          # Vue.js Frontend (Port 3000)
│   ├── src/
│   │   ├── main.js                    # Application entry
│   │   └── App.vue                    # Main component
│   ├── index.html                     # HTML template
│   ├── package.json                   # Node dependencies
│   ├── vite.config.js                 # Vite configuration
│   └── Dockerfile                     # Container image
│
├── docs/                              # Architecture Documentation
│   ├── ARCHITECTURE.md                # System design & flow
│   ├── SCALABILITY.md                 # Scaling strategies
│   └── AWS-DEPLOYMENT.md              # Cloud deployment guide
│
└── data/                              # SQLite database directory
    └── analytics.db                   # Event storage (created at runtime)

SERVICES:
========

1. Redis (Port 6379)
   - Message queue between ingestion and consumer

2. Go Ingestion (Port 8080)
   - POST /v1/events - Submit tracking events
   - GET /v1/health - Health check

3. Go Consumer (Background)
   - Subscribes to Redis channel "analytics:events"
   - Batches and writes to SQLite

4. PHP Analytics (Port 8000)
   - GET /api/analytics - Aggregated metrics
   - GET /api/health - Health check

5. Vue.js Frontend (Port 3000)
   - Dashboard displaying all metrics
   - Auto-refresh every 5 seconds

METRICS PROVIDED:
================
- total_page_views
- total_add_to_carts
- total_purchases
- conversion_rate (%)
- average_purchase_value
- max_purchase_value
- min_purchase_value
- top_product_id

EVENT TYPES:
===========
- page_view: User visits a page/product
- add_to_cart: Product added to cart
- purchase: Order completed with amount

COMMANDS:
=========
make build       - Build all Docker containers
make up          - Start all services
make down        - Stop all services
make logs        - View service logs
make test        - Run all tests
make clean       - Clean up everything
